{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MongoDB Wildfire Workshop on LinuxONE","text":"<p>Welcome to our MongoDB wildfire workshop on LinuxONE. Organizations can leverage security, high availability and resilency provided by LinuxONE servers by running MongoDB on them. </p>"},{"location":"#agenda","title":"Agenda","text":""},{"location":"#presentations","title":"Presentations","text":"<ul> <li>MongoDB 101</li> <li>MongoDB High Availability</li> <li>MongoDB Sharding (Scalability)</li> <li>MongoDB Use Cases</li> <li>MongoDB Best Practices</li> </ul>"},{"location":"#hands-on-labs","title":"Hands-on Labs","text":"<ul> <li>MongoDB Installation Lab</li> <li>MongoDB Usage Lab (CRUD)</li> <li>MongoDB Operations Lab (Backup / Restore, Replication, Sharding)</li> </ul>"},{"location":"#workshop-authors","title":"Workshop authors","text":"<ul> <li>Sam Amsavelu</li> <li>David Simpson</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Thanks to the following Contributors for this workshop: Jacob Emery, Matt Mondics, Barry Silliman and Dorothy Quincy</li> </ul>"},{"location":"cloudaccess/","title":"Lab Access to Linux guests on IBM Techzone (Cloud environment)","text":"<ol> <li> <p>The Lab excercises will be performed on Red Hat Linux 8.x guests running on IBM Z system Cloud enviroment hosted from IBM Techzone </p> </li> <li> <p>To access the IBM Techzone (Cloud enviroment) you will need an IBMid</p> </li> <li> <p>If you have IBMid, proceed to step 4,  otherwise execute the following steps to create the IBMid:</p> </li> <li> <p>Connect to the IBM Techzone (Cloud evironment) using the    following link </p> </li> </ol>"},{"location":"cloudaccess/#creating-an-ibmid","title":"Creating an IBMid","text":"<p>Visit the IBM ID registration page. Fill in your email address, add your first and last name, create a password and specify your country of residence. Click Next.</p> <p></p> <p>After clicking Next, a verification code will be sent to your email address. Copy and paste the code from your email into the verification box. Click Next.</p> <p>Note: check your spam folder or firewall settings if the verification email is not received within 5 minutes. </p>"},{"location":"lab1_install/","title":"MongoDB installation","text":""},{"location":"lab1_install/#overview","title":"Overview","text":"<p>We will be using the Ansible playbooks to install MongoDB in the lab environment by following the steps below.</p> <ol> <li>Clone the MongoDB git repository</li> <li>Run the setup script </li> <li>Run the ansible playbook </li> </ol>"},{"location":"lab1_install/#mongodb-installation-steps","title":"MongoDB installation steps","text":""},{"location":"lab1_install/#clone-the-mongodb-git-repository","title":"Clone the mongoDB git repository","text":"<p>Make sure you are connected to the Linux guest from the previous step.</p> The following is an example where the terminal will show that you are connected to the Linux guest [click to expand me] <pre><code>login as: cecuser\nPre-authentication banner message from server:\n|\n| ______________________________________________________________________\n|\n|                     Welcome to IBM Technology Zone\n| ______________________________________________________________________\n|\n|\n| IBM's internal systems must only be used for conducting IBM's business\n| or for purposes authorized by IBM management.  Use is subject to audit\n| at any time by IBM management.\n|\n| Unauthorized access will be investigated and penalties will be pursued\n| in conformance with applicable laws and regulations. If you are not an\n| authorized user disconnect now.\n|\n|\nEnd of banner message from server\ncecuser@129.40.60.161's password:\n\n______________________________________________________________________\n\n                  Welcome to IBM Technology Zone\n______________________________________________________________________\n\n\nIBM's internal systems must only be used for conducting IBM's business\nor for purposes authorized by IBM management.  Use is subject to audit\nat any time by IBM management.\n\nUnauthorized access will be investigated and penalties will be pursued\nin conformance with applicable laws and regulations. If you are not an\nauthorized user disconnect now.\n______________________________________________________________________\n\nIaaS Red Hat Enterprise Linux 8.10\n\nActivate the web console with: systemctl enable --now cockpit.socket\n\nRegister this system with Red Hat Insights: insights-client --register\nCreate an account or view all your systems at https://red.ht/insights-dashboard\nLast login: Thu Mar 13 10:18:51 2025 from 9.19.184.79\n[cecuser@p1243-zvm1 ~]$\n</code></pre> <p>Enter the following Linux commands to switch to super user for installation and then change the directory to a temporary working directory /tmp .</p> <pre><code>   sudo -i \n   cd /tmp\n</code></pre> The following is an example where the terminal will show that you are connected to the Linux terminal as \u201croot\u201d and the working directory is tmp [click to expand me] <pre><code>[cecuser@p1243-zvm1 /]$    sudo -i\n[root@p1243-zvm1 ~]#    cd /tmp\n[root@p1243-zvm1 tmp]#\n</code></pre> <p>We have created an Ansible playbook repository to install MongoDB on a Red Hat Linux guest and clone that repository using the following command.</p> <pre><code>   git clone https://github.com/samveluIBM/MongoDB-Wildfire-Workshop\n</code></pre> The following example shows the output of succesful cloning of the repository [click to expand me] <pre><code>[root@p1243-zvm1 tmp]#    git clone https://github.com/samveluIBM/MongoDB-Wildfire-Workshop\nCloning into 'MongoDB-Wildfire-Workshop'...\nremote: Enumerating objects: 20, done.\nremote: Counting objects: 100% (20/20), done.\nremote: Compressing objects: 100% (14/14), done.\nremote: Total 20 (delta 1), reused 3 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (20/20), 4.99 KiB | 4.99 MiB/s, done.\nResolving deltas: 100% (1/1), done.\n[root@p1243-zvm1 tmp]#\n</code></pre>"},{"location":"lab1_install/#run-the-setup-script","title":"Run the setup script","text":"<p>This step will install the python and ansibles to use ansible playbooks to install MongoDB on the Linux guest.  Change to the cloned directory and then run the setup script. Use the following commands:</p> <pre><code>   cd MongoDB-Wildfire-Workshop/\n</code></pre> <pre><code>    ./setup.sh\n</code></pre> The following example shows the output of succesful execution of setup.sh script [click to expand me] <pre><code>Installed products updated.\n\nInstalled:\nansible-9.2.0-1.el8.noarch\nansible-core-2.16.3-2.el8.s390x\npython3-jmespath-0.9.0-11.el8.noarch\npython3.12-3.12.8-1.el8_10.s390x\npython3.12-cffi-1.16.0-2.el8.s390x\npython3.12-cryptography-41.0.7-1.el8.s390x\npython3.12-libs-3.12.8-1.el8_10.s390x\npython3.12-pip-wheel-23.2.1-4.el8.noarch\npython3.12-ply-3.11-2.el8.noarch\npython3.12-pycparser-2.20-2.el8.noarch\npython3.12-pyyaml-6.0.1-2.el8.s390x\npython39-3.9.20-1.module+el8.10.0+22342+478c159e.s390x\npython39-libs-3.9.20-1.module+el8.10.0+22342+478c159e.s390x\npython39-pip-20.2.4-9.module+el8.10.0+21329+8d76b841.noarch\npython39-pip-wheel-20.2.4-9.module+el8.10.0+21329+8d76b841.noarch\npython39-setuptools-50.3.2-6.module+el8.10.0+22183+c898c0c1.noarch\npython39-setuptools-wheel-50.3.2-6.module+el8.10.0+22183+c898c0c1.noarch\nsshpass-1.09-4.el8.s390x\n\nComplete!\n[root@p1243-zvm1 MongoDB-Wildfire-Workshop]#\n</code></pre>"},{"location":"lab1_install/#run-the-ansible-playbook","title":"Run the ansible playbook","text":"<p>In this step we will run the ansible playbook to install MongoDB. Use the following command:</p> <pre><code>   ansible-playbook mongodbInstall.yml \n</code></pre> The following example shows the output of succesful MongoDB installtion [click to expand me] <pre><code>[root@zdblab05 zmongodb]# ansible-playbook mongodbInstall.yml\n\nPLAY [Install MongoDB on a Linux Guest.] ***********************************************************\n\nTASK [Gathering Facts] *****************************************************************************\nok: [127.0.0.1]\n\nTASK [Create repo file for mongodb-enterprise] *****************************************************\nok: [127.0.0.1]\n\nTASK [Install  mongodb-enterprise.] ****************************************************************\nchanged: [127.0.0.1] =&gt; (item={'pkg': 'mongodb-enterprise', 'when': True})\nok: [127.0.0.1] =&gt; (item={'pkg': 'libselinux-utils', 'when': \"db_path != '/var/lib/mongodb' or log_file != '/var/log/mongodb/mongod.log'\"})\nok: [127.0.0.1] =&gt; (item={'pkg': 'policycoreutils-python-utils', 'when': \"db_path != '/var/lib/mongodb' or log_file != '/var/log/mongodb/mongod.log'\"})\n\nTASK [Set SELinux to Permissive mode.] *************************************************************\nskipping: [127.0.0.1]\n\nTASK [Disable SELinux permanently in configuration.] ***********************************************\nskipping: [127.0.0.1]\n\nTASK [Ensure db and log files exist and are owned by mongod user.] *********************************\nchanged: [127.0.0.1] =&gt; (item={'path': '/var/lib/mongodb', 'state': 'directory', 'recurse': True})\nchanged: [127.0.0.1] =&gt; (item={'path': '/var/log/mongodb/mongod.log', 'state': 'touch', 'recurse': False})\n\nTASK [Change db and/or log file paths.] ************************************************************\nchanged: [127.0.0.1] =&gt; (item={'key': 'dbPath', 'value': '/var/lib/mongodb', 'when': \"db_path != '/var/lib/mongodb'\"})\nok: [127.0.0.1] =&gt; (item={'key': 'path', 'value': '/var/log/mongodb/mongod.log', 'when': \"log_file != '/var/log/mongodb/mongod.log'\"})\n\nTASK [Start mongod service.] ***********************************************************************\nchanged: [127.0.0.1]\n\nTASK [Check mongod status.] ************************************************************************\nchanged: [127.0.0.1]\n\nTASK [Print mongod status.] ************************************************************************\nok: [127.0.0.1] =&gt;\nmsg: |-\n\u25cf mongod.service - MongoDB Database Server\n Loaded: loaded (/usr/lib/systemd/system/mongod.service; enabled; vendor preset: disabled)\n Active: active (running) since Mon 2025-03-10 21:51:38 UTC; 288ms ago\n   Docs: https://docs.mongodb.org/manual\nMain PID: 490438 (mongod)\n Memory: 70.3M\n CGroup: /system.slice/mongod.service\n         \u2514\u2500490438 /usr/bin/mongod -f /etc/mongod.conf\n\nMar 10 21:51:38 zdblab05 systemd[1]: Started MongoDB Database Server.\nMar 10 21:51:38 zdblab05 mongod[490438]: {\"t\":{\"$date\":\"2025-03-10T21:51:38.431Z\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":7484500, \"ctx\":\"main\",\"msg\":\"Environment variable MONGODB_CONFIG_OVERRIDE_NOFORK == 1, overriding \\\"processManagement.fork\\\" to false\"}\n\nTASK [Check mongod version.] ***********************************************************************\nchanged: [127.0.0.1]\n\nTASK [Print mongod version.] ***********************************************************************\nok: [127.0.0.1] =&gt;\nmsg: mongod_version.stdout\n\nTASK [Set bindIP to 0.0.0.0 in mongod.conf] ********************************************************\nchanged: [127.0.0.1]\n\nTASK [Verify MongoDB Enterprise Edition installed successfully.] ***********************************\nchanged: [127.0.0.1]\n\nTASK [Congratulations!] ****************************************************************************\nok: [127.0.0.1] =&gt;\nmsg: MongoDB installation complete.\n\nPLAY RECAP *****************************************************************************************\n127.0.0.1                  : ok=13   changed=8    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0\n\n[root@zdblab05 zmongodb]#\n</code></pre>"},{"location":"lab1_install/#mongodb-uninstallation","title":"MongoDB Uninstallation","text":""},{"location":"lab1_install/#to-uninstall-mongodb","title":"To Uninstall MongoDB","text":"<p>In case if you want to uninstall MongoDB you can run the ansible playbook to uninstall mongoDB. Use the following command:</p> <pre><code>   ansible-playbook mongodbUnInstall.yml \n</code></pre> The following example shows the output of succesful MongoDB uninstalltion [click to expand me] <pre><code>[root@zdblab05 zmongodb]# ansible-playbook mongodbUnInstall.yml\n\nPLAY [UnInstall MongoDB on a Linux Guest.] *********************************************************\n\nTASK [Gathering Facts] *****************************************************************************\nok: [127.0.0.1]\n\nTASK [Gather info about installed  services.] ******************************************************\nok: [127.0.0.1]\n\nTASK [Stop mongod service.] ************************************************************************\nchanged: [127.0.0.1]\n\nTASK [Uninstall MongoDB.] **************************************************************************\nchanged: [127.0.0.1]\n\nTASK [Remove data and log directories] *************************************************************\nok: [127.0.0.1] =&gt; (item=/var/log/mongodb/mongod.log)\nchanged: [127.0.0.1] =&gt; (item=/var/lib/mongodb)\n\nTASK [Done.] ***************************************************************************************\nok: [127.0.0.1] =&gt;\nmsg: MongoDB has been uninstalled successfully.\n\nPLAY RECAP *****************************************************************************************\n127.0.0.1                  : ok=6    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n\n[root@zdblab05 zmongodb]#\n</code></pre> <p>!!! Note     In case you have uninstalled MongoDB, go back and install it again by running the Ansible playbook to install MongoDB. </p>"},{"location":"lab2_basics/","title":"MongoDB basic usage lab","text":""},{"location":"lab2_basics/#overview","title":"Overview","text":"<p>The objective of this lab is to execute some basic commands in a MongoDB deployment. We will be using  mongosh  shell environment to execute the MongoDB commands.</p> <ol> <li>Connect to MongoDB deployment using MongoDB Shell  mongosh</li> <li>Execute basic MongoDB commands </li> </ol>"},{"location":"lab2_basics/#mongodb-basic-usage-operations","title":"MongoDB basic usage operations","text":""},{"location":"lab2_basics/#connect-to-mongodb-deployment-using-mongosh","title":"Connect to MongoDB deployment using mongosh","text":"<p>Make sure you are connected to the Linux guest from the previous step.</p> <p>The MongoDB Shell, mongosh, is a JavaScript and Node.js REPL environment for interacting with MongoDB deployments. We can use the MongoDB Shell to test queries and interact with the data in the MongoDB instance running on our localhost with default port 27017.</p> <p>Enter the following command to connect to MongoDB</p> <p><pre><code>   mongosh\n</code></pre> You can see the MongoDB version and some informational / warning messages.</p> The following is an example where the terminal will show that you are connected to the MongoDB environment [click to expand me] <pre><code>[root@p1243-zvm1 MongoDB-Wildfire-Workshop]# mongosh\nCurrent Mongosh Log ID: 67d31b0d4065a9f808a63a57\nConnecting to:          mongodb://127.0.0.1:27017/?directConnection=true&amp;serverSelectionTimeoutMS=2000&amp;appName=mongosh+2.4.2\nUsing MongoDB:          7.0.17\nUsing Mongosh:          2.4.2\n\nFor mongosh info see: https://www.mongodb.com/docs/mongodb-shell/\n\n------\nThe server generated these startup warnings when booting\n2025-03-13T13:07:55.567-04:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem\n2025-03-13T13:07:55.593-04:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\n2025-03-13T13:07:55.593-04:00: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never' in this binary version\n2025-03-13T13:07:55.593-04:00: vm.max_map_count is too low\n------\n\nEnterprise test&gt;\n</code></pre> <p>You may use the cls command to clear the shell environment messages</p> <pre><code>   cls\n</code></pre>"},{"location":"lab2_basics/#execute-basic-mongodb-commands","title":"Execute basic MongoDB commands","text":""},{"location":"lab2_basics/#list-databases","title":"List databases","text":"<p>You can list the databases by issuing the show dbs command in mongosh shell.</p> <pre><code>   show dbs\n</code></pre> <p>The output of the above command will show the available databases, and in our case there are three default databases in the MongoDB deployment</p> The following example shows that there are three databases [click to expand me] <pre><code>Enterprise test&gt;    show dbs\nadmin   40.00 KiB\nconfig  60.00 KiB\nlocal   40.00 KiB\nEnterprise test&gt;\n</code></pre>"},{"location":"lab2_basics/#display-the-current-database","title":"Display the current database","text":"<p>You can list the current databases by issuing the db command in mongosh shell.</p> <pre><code>   db\n</code></pre> <p>The output of the above command will show the current available database, you can see the current database as \u201ctest\u201d in our case.</p> The following example shows the current database [click to expand me] <pre><code>Enterprise test&gt; db\ntest\nEnterprise test&gt;\n</code></pre>"},{"location":"lab2_basics/#create-a-new-database","title":"Create a new database","text":"<p>In MongoDB creating a new database is done by issuing use command. If the database is not already there the database will be created automatically. Here we will create \"labtest\" database </p> <pre><code>   use labtest\n</code></pre> <p>The output of the above command shows the current database is \u201clabtest\u201d in our case. </p> The following example shows the current databases [click to expand me] <pre><code>Enterprise test&gt; use labtest\nswitched to db labtest\nEnterprise labtest&gt;\n</code></pre>"},{"location":"lab2_basics/#create-documents","title":"Create documents","text":"<p>Let us create documents into our \"labtest\" database. The dosuments are created in a collection. If a collection doesn\u2019t exist in the database, it will be created for you. </p> <p>In our example we will first insert a single document into \u201clabtest\u201d database and \u201cemployee\u201d collection using the  db.collection.insertOne() method.</p> <p><pre><code>   db.employee.insertOne(\n   {\n    name: \"John Doe\",\n    number: 1000  \n   }\n  )\n</code></pre> When a document is created MongoDB generates the _id field and its value automatically. The generated ObjectId consists of a unique randomly generated hexadecimal value.</p> The following example shows the output of the insert operation  [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.insertOne(\n...    {\n...     name: \"John Doe\",\n...     number: 1000\n...    }\n...   )\n{\nacknowledged: true,\ninsertedId: ObjectId('67d329a34065a9f808a63a58')\n}\nEnterprise labtest&gt;\n</code></pre> <p>Now let us insert two more documents into our \"labtest\" database and \u201cemployee\u201d collection using the db.collection.insertMany() method.</p> <pre><code>   db.employee.insertMany([\n      {\n        name: \"Emily John\",\n        number: 1500  \n      },\n      {\n        name: \"Super Man\",\n       number: 2000  \n       }\n    ])\n</code></pre> The following example shows the output of the insert operation  [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.insertMany([\n...       {\n...         name: \"Emily John\",\n...         number: 1500\n...       },\n...       {\n...         name: \"Super Man\",\n...        number: 2000\n...        }\n...     ])\n{\nacknowledged: true,\ninsertedIds: {\n'0': ObjectId('67d32b594065a9f808a63a59'),\n'1': ObjectId('67d32b594065a9f808a63a5a')\n}\n}\nEnterprise labtest&gt;\n</code></pre>"},{"location":"lab2_basics/#query-documents","title":"Query documents","text":"<p>Let us query the documents in our \"labtest\" database by using the  db.collection.find() method.</p> <pre><code>   db.employee.find()\n</code></pre> The following example shows there are three documents [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.find()\n[\n{\n_id: ObjectId('67d329a34065a9f808a63a58'),\nname: 'John Doe',\nnumber: 1000\n},\n{\n_id: ObjectId('67d32b594065a9f808a63a59'),\nname: 'Emily John',\nnumber: 1500\n},\n{\n_id: ObjectId('67d32b594065a9f808a63a5a'),\nname: 'Super Man',\nnumber: 2000\n}\n]\nEnterprise labtest&gt;\n</code></pre> <p>Let us query the documents in our \"labtest\" database for a specific search condition by using the  db.collection.find() method.</p> <p>We will find the documents matching employee number 1000</p> <pre><code>   db.employee.find( { \"number\": 1000 })\n</code></pre> The following example shows there is one document with number 1000 [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.find()\n[\n{\n_id: ObjectId('67d329a34065a9f808a63a58'),\nname: 'John Doe',\nnumber: 1000\n}\n]\nEnterprise labtest&gt;\n</code></pre>"},{"location":"lab2_basics/#update-documents","title":"Update documents","text":"<p>Let us update a document in our \"labtest\" database by using the db.collection.updateOne() method. We will add a new field \u201ccurrentDate\u201d to a single document who has a \u201cnumber\u201d field value equal to 1000.</p> <pre><code>   db.employee.updateOne(  { \"number\": 1000 }, \n    {\n     $currentDate: { lastUpdated: true } \n    }\n   )\n</code></pre> The following example shows a single document is updated [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.updateOne(  { \"number\": 1000 },\n...     {\n...      $currentDate: { lastUpdated: true }\n...     }\n...    )\n{\nacknowledged: true,\ninsertedId: null,\nmatchedCount: 1,\nmodifiedCount: 1,\nupsertedCount: 0\n}\nEnterprise labtest&gt;\n</code></pre> <p>Let us query the documents in our \"labtest\" database by using the  db.collection.find() method.</p> <pre><code>   db.employee.find()\n</code></pre> The following example shows that there are three documents and only one document with number 1000 has one extra column lastUpdated  [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.find()\n[\n{\n_id: ObjectId('67d329a34065a9f808a63a58'),\nname: 'John Doe',\nnumber: 1000,\nlastUpdated: ISODate('2025-03-13T19:42:34.906Z')\n},\n{\n_id: ObjectId('67d32b594065a9f808a63a59'),\nname: 'Emily John',\nnumber: 1500\n},\n{\n_id: ObjectId('67d32b594065a9f808a63a5a'),\nname: 'Super Man',\nnumber: 2000\n}\n]\nEnterprise labtest&gt;\n</code></pre>"},{"location":"lab2_basics/#delete-documents","title":"Delete documents","text":"<p>The MongoDB shell provides the following methods to delete documents from a collection:</p> <p>To delete a single document, use db.collection.deleteOne() </p> <p>To delete multiple documents, use db.collection.deleteMany()</p> <p>Let us delete a single document in our \"labtest\" database by using the  db.collection.deleteOne() method which satisfies our criteria to match number 1500</p> <pre><code>   db.employee.deleteOne({ \"number\": 1500 })\n</code></pre> The following example shows the document is deleted [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.deleteOne({ \"number\": 1500 })\n{ acknowledged: true, deletedCount: 1 }\nEnterprise labtest&gt;\n</code></pre> <p>Let us query the documents in our \"labtest\" database by using the  db.collection.find() method.</p> <pre><code>   db.employee.find()\n</code></pre> The following example shows that there are two documents [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.find()\n[\n{\n_id: ObjectId('67d329a34065a9f808a63a58'),\nname: 'John Doe',\nnumber: 1000,\nlastUpdated: ISODate('2025-03-13T19:42:34.906Z')\n},\n{\n_id: ObjectId('67d32b594065a9f808a63a5a'),\nname: 'Super Man',\nnumber: 2000\n}\n]\nEnterprise labtest&gt;\n</code></pre>"},{"location":"lab2_basics/#count-the-number-of-documents","title":"Count the number of documents","text":"<p>Let us query the number of documents in our \"employee\" collection of the \"labtest\" database by using the db.collection.countDocuments() method  </p> <pre><code>   db.employee.countDocuments()\n</code></pre> The following example shows that there are two documents [click to expand me] <pre><code>Enterprise labtest&gt;    db.employee.countDocuments()\n2\nEnterprise labtest&gt;\n</code></pre>"},{"location":"lab2_basics/#summary","title":"Summary","text":"<p>In this lab we have executed some basic MongoDB commands in a MongoDB deployment  using  mongosh  shell environment. </p> <p>Now you can exit the mongosh shell environment by issuing exit command</p> <pre><code>   exit\n</code></pre> The following example shows the output [click to expand me] <pre><code>Enterprise labtest&gt;    exit\n[root@p1243-zvm1 MongoDB-Wildfire-Workshop]#\n</code></pre>"},{"location":"lab3_operations/","title":"MongoDB basic operations lab","text":""},{"location":"lab3_operations/#overview","title":"Overview","text":"<p>The objective of this lab is to execute some basic MongoDB operations in a MongoDB deployment. We will be performing some of the following basic operations.</p> <ol> <li>Backup a MongoDB database</li> <li>Drop a database</li> <li>Restore the database</li> <li>Shutdown a MongoDB Enterprise</li> <li>Startup a MongoDB Enterprise</li> <li>Setup a MongoDB replication cluster </li> </ol>"},{"location":"lab3_operations/#mongodb-basic-operations-steps","title":"MongoDB basic operations steps","text":""},{"location":"lab3_operations/#backup-a-mongodb-database","title":"Backup a MongoDB database","text":"<p>Make sure you are connected to the Linux guest from the previous step.</p> <p>In this lab we are going to use the mongodump utility to backup our lab database \"labtest\". </p> <p>Enter the following command to save the backup of the labtest database inside /tmp  directory</p> <pre><code>   mongodump -v --db labtest --out /tmp\n</code></pre> The following is an example where the terminal will show that the database dump is taken [click to expand me] <pre><code>[root@p1243-zvm1 MongoDB-Wildfire-Workshop]# mongodump -v --db labtest --out /tmp\n2025-03-13T17:05:10.012-0400    dumping up to 1 collections in parallel\n2025-03-13T17:05:10.020-0400    writing labtest.employee to /tmp/labtest/employee.bson\n2025-03-13T17:05:10.022-0400    done dumping labtest.employee (2 documents)\n[root@p1243-zvm1 MongoDB-Wildfire-Workshop]#\n</code></pre> <p>Enter the following command to list the /tmp/labtest directory </p> <pre><code>   ls -alF /tmp/labtest/\n</code></pre> The following is an example where the terminal will show that the database dump is taken inside /tmp/labtest directory [click to expand me] <pre><code>[root@p1243-zvm1 MongoDB-Wildfire-Workshop]# ls -alF /tmp/labtest/\ntotal 16\ndrwxr-xr-x. 2 root root 4096 Mar 13 17:05 ./\ndrwxrwxrwt. 5 root root 4096 Mar 13 17:11 ../\n-rw-r--r--. 1 root root  128 Mar 13 17:05 employee.bson\n-rw-r--r--. 1 root root  175 Mar 13 17:05 employee.metadata.json\n[root@p1243-zvm1 MongoDB-Wildfire-Workshop]#\n</code></pre>"},{"location":"lab3_operations/#drop-a-mongodb-database","title":"Drop a MongoDB database","text":"<p>In this lab we are going to use the db.dropDatabase() utility to drop our database \"labtest\".  First let us connect to mongosh and list the databases in the environment by using show dbs command</p> <p>Enter the following command to connect to MongoDB and list the databases</p> <pre><code>   mongosh\n   show dbs\n</code></pre> The following is an example where the terminal will show that there are four databases in the deployment [Click to expand me] <pre><code>Enterprise test&gt; show dbs\nadmin    40.00 KiB\nconfig   72.00 KiB\nlabtest  72.00 KiB\nlocal    40.00 KiB\nEnterprise test&gt;\n</code></pre> <p>Now connect to the \"labtest\" database, drop that database by db.dropDatabase() utility and then list the databases by entering the following series of commands</p> <pre><code>   use labtest;\n   db.dropDatabase();\n   show dbs\n</code></pre> The following is an example where the terminal will show that there are four databases in the deployment [Click to expand me] <pre><code>Enterprise test&gt; use labtest\nswitched to db labtest\nEnterprise labtest&gt; db.dropDatabase();\n{ ok: 1, dropped: 'labtest' }\nEnterprise labtest&gt; show dbs\nadmin    40.00 KiB\nconfig  108.00 KiB\nlocal    40.00 KiB\nEnterprise labtest&gt;\n</code></pre> <p>Now let us exit the mongosh shell environment by issuing exit command</p> <pre><code>      exit\n</code></pre>"},{"location":"lab3_operations/#restore-a-mongodb-database","title":"Restore a MongoDB database","text":"<p>In this part of the lab we are going to use the mongorestore utility to restore our deleted lab database \"labtest\". </p> <p>Enter the following command to restore the backup of the labtest database available inside /tmp  directory</p> <pre><code>   mongorestore -v --db labtest  --drop  /tmp/labtest\n</code></pre> The following is an example where the terminal will show that the database dump is restored [click to expand me] <pre><code>   [root@p1243-zvm1 MongoDB-Wildfire-Workshop]#    mongorestore -v --db labtest  --drop  /tmp/labtest\n   2025-03-14T14:27:41.092-0400    using write concern: &amp;{majority &lt;nil&gt; 0s}\n   2025-03-14T14:27:41.096-0400    The --db and --collection flags are deprecated for this use-case; please use --nsInclude instead, i.e. with --nsInclude=${DATABASE}.${COLLECTION}\n   2025-03-14T14:27:41.096-0400    building a list of collections to restore from /tmp/labtest dir\n   2025-03-14T14:27:41.096-0400    found collection labtest.employee bson to restore to labtest.employee\n   2025-03-14T14:27:41.096-0400    found collection metadata from labtest.employee to restore to labtest.employee\n   2025-03-14T14:27:41.096-0400    reading metadata for labtest.employee from /tmp/labtest/employee.metadata.json\n   2025-03-14T14:27:41.096-0400    creating collection labtest.employee with no metadata\n   2025-03-14T14:27:41.102-0400    restoring labtest.employee from /tmp/labtest/employee.bson\n   2025-03-14T14:27:41.113-0400    finished restoring labtest.employee (2 documents, 0 failures)\n   2025-03-14T14:27:41.113-0400    no indexes to restore for collection labtest.employee\n   2025-03-14T14:27:41.113-0400    2 document(s) restored successfully. 0 document(s) failed to restore.\n   [root@p1243-zvm1 MongoDB-Wildfire-Workshop]#\n</code></pre>"},{"location":"lab3_operations/#summary","title":"Summary","text":"<p>In this lab we have executed some basic MongoDB commands in a MongoDB deployment  using  mongosh  shell environment. </p> <p>Now you can exit the mongosh shell environment by issuing exit command</p> <pre><code>   exit\n</code></pre> The following example shows the output [click to expand me] <pre><code>Enterprise labtest&gt;    exit\n[root@p1243-zvm1 MongoDB-Wildfire-Workshop]#\n</code></pre>"},{"location":"localdocbuild/","title":"Building the Documentation Yourself","text":"<p>!!! warning \"For Documentation Contributors Only\"</p> <pre><code>This is for people who want to update the documentation of `MongoDB Wildfire Workshop` and see the updates locally or if you are a regular user and are curious on how to do it. In most cases, just accessing the documentation via this site (https://samveluibm.github.io/MongoDB-Wildfire-Workshop/) is best. If you want to access the documentation without internet access, instead of following this documentation, you should navigate to the print page (which displays the documentation in printable format). Then, Print-&gt;Save to pdf in your web browser and access the PDF freely offline.\n</code></pre>"},{"location":"localdocbuild/#installing-necessary-pre-requisites","title":"Installing Necessary Pre-requisites","text":"<ol> <li>Install pip3 on your computer, if it's not already installed (instructions vary depending on Operating System)</li> <li> <p>Install mkdocs and plugins used in <code>MongoDB Wildfire Workshop</code> documentation</p> <pre><code>pip3 install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-print-site-plugin\n</code></pre> </li> <li> <p>Get a local copy of the source code with:</p> HTTPSSSH <pre><code>git clone https://github.com/samveluIBM/MongoDB-Wildfire-Workshop.git\n</code></pre> <pre><code>git clone git@github.com:samveluIBM/MongoDB-Wildfire-Workshop.git\n</code></pre> </li> <li> <p>Change into the source code directory in your terminal</p> </li> <li> <p>Serve the documentation in a terminal while in your source code directory with:</p> <pre><code>mkdocs serve\n</code></pre> </li> <li> <p>Open a web browser and access the documentation</p> <p>The above <code>mkdocs serve</code> command should output an address to access the documentation which by default is: http://127.0.0.1:8000 which is over localhost (only accessible locally). Go to this address to access the documentation.</p> <p>!!! Tip \"Documentation updates automatically\"</p> <pre><code>If you leave the terminal tab where you ran `mkdocs serve` open, the docs will update automatically when your save your changes to the file. This way as you make changes you can check your changes at the given web site, displaying in the same way as it will when displayed as a static website on GitHub.\n</code></pre> </li> <li> <p>Make edits to the relevant markdown files in the <code>docs/</code> subfolder, and watch the changes display in realtime in your web browser when you save your file updates.</p> </li> </ol> <p>!!! Tip \"Special Documentation Features\"</p> <pre><code>To use the special features of `mkdocs-material` and the plugins used in these docs that enhance the documentation from traditional markdown, please take a look at the syntax for the various features. You can find examples of them in action in the markdown of this site by either:\n\n- Inspecting a given page of the site in your web browser\n\n    1. scroll to the top of a page with a feature you want to see how to use\n    2. click the page with an eye icon to the right of the title\n    3. Inspect the markdown for the part of the page with the given feature\n\nOR\n\n- See the markdown for the entire site in the `docs/` subfolder of the GitHub project, navigating the markdown files for each page\n\nAdditionally, you can find more examples and explainers on the [mkdocs-material reference page](https://squidfunk.github.io/mkdocs-material/reference/){target=\"_blank\" rel=\"noopener\"}.\n</code></pre>"},{"location":"onpremaccess/","title":"Lab Access to Linux guests on IBM Techzone (On-premise environment)","text":"<ol> <li> <p>The Lab excercises will be performed on Red Hat Linux 8.x guests running on IBM Z system in an On-premise enviroment hosted by IBM Techzone </p> </li> <li> <p>To access the IBM Techzone (On-premise) you need a vpn id and password</p> </li> <li> <p>Connect to the VPN by using Cisco AnyConnect client.      If you don't have AnyConnect installed on your system you may follow the steps outlined here </p> </li> <li> <p>When you established vpn connectivity you can SSH to the Linux guest:</p> </li> </ol>"},{"location":"onpremaccess/#if-you-are-using-windows-workstations","title":"If you are using windows workstations:","text":"<ul> <li>You can use PuTTY to connect and if PuTTY utility is not available, you can  download and install from the following url</li> <li>In the following PuTTY terminal</li> </ul> <ul> <li> <p>Enter your ip address from the user information section in the Host Name field and press Open</p> </li> <li> <p>In the displayed terminal enter the login as: cecuser and press enter</p> </li> <li>For the password prompt enter mongodblabuser$</li> </ul> <p>The following is an example of successful login to the Linux Guest</p> <p></p>"}]}